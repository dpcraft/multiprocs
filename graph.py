import matplotlib.pyplot as plt
import numpy as np
import math
import random
from scipy.special import comb


# 一个环备份后的结果
def graph_1():
    x = np.linspace(0, 1, 51)
    y_1 = [0.8973333333333334, 0.8973333333333334, 0.8973000000000001, 0.8973333333333334, 0.8973666666666666,
           0.8972000000000001, 0.8973000000000001, 0.8973000000000001, 0.8975, 0.8975, 0.8972333333333335,
           0.8978000000000002, 0.8974333333333334, 0.8977333333333333, 0.8975, 0.8978000000000002, 0.8974333333333334,
           0.8974666666666667, 0.8974666666666666, 0.8975666666666665, 0.8975666666666665, 0.8975666666666667,
           0.8974333333333334, 0.8973333333333334, 0.8979666666666667, 0.8968999999999999, 0.8970666666666668,
           0.8975000000000002, 0.8969333333333334, 0.8970333333333335, 0.8977666666666668, 0.8955, 0.8831666666666667,
           0.8914666666666667, 0.7874, 0.5094333333333333, 0.35073333333333334, 0.1986, 0.10666666666666666,
           0.10400000000000001, 0.10356666666666667, 0.10310000000000001, 0.10253333333333334, 0.10313333333333333,
           0.1024, 0.10283333333333333, 0.10269999999999999, 0.10233333333333335, 0.10196666666666668,
           0.10256666666666667, 0.10266666666666666]
    plt.plot(x, y_1, 'bo-')
    plt.title('Fig 1')
    plt.xlabel('Infection rate')
    plt.ylabel('accurate rate')
    plt.legend()
    plt.show()


def graph_2():
    x = np.linspace(0, 1, 51)
    y_dict = {1: [0.9026666666666665, 0.9026666666666665, 0.9026666666666665, 0.9027, 0.9026333333333334, 0.9027, 0.9024666666666666, 0.9023999999999999, 0.9027, 0.9028, 0.9029333333333334, 0.9025666666666667, 0.9028666666666666, 0.9022666666666666, 0.9022333333333334, 0.9025333333333334, 0.9023, 0.9019999999999999, 0.9030333333333334, 0.9019999999999999, 0.9026666666666665, 0.9012999999999998, 0.9023999999999999, 0.9025666666666666, 0.9024333333333333, 0.9019666666666668, 0.9020333333333334, 0.9007666666666667, 0.9010333333333334, 0.9006666666666667, 0.8943, 0.9010999999999999, 0.8904666666666667, 0.8448, 0.8734333333333334, 0.7129000000000001, 0.23813333333333336, 0.15976666666666667, 0.11280000000000001, 0.10729999999999999, 0.101, 0.09983333333333333, 0.09976666666666668, 0.0978, 0.09836666666666667, 0.09753333333333333, 0.0967, 0.09703333333333333, 0.09743333333333333, 0.09733333333333331, 0.09733333333333331],
              2: [0.9049999999999999, 0.9049999999999999, 0.9050666666666667, 0.9048999999999999, 0.9050333333333332, 0.905, 0.9046333333333335, 0.9049999999999999, 0.9048666666666667, 0.9050666666666667, 0.9046333333333335, 0.9043333333333333, 0.9043666666666667, 0.9038999999999999, 0.9042333333333333, 0.9040333333333332, 0.9044000000000001, 0.9037666666666666, 0.9033333333333333, 0.9033333333333333, 0.9035666666666667, 0.9033666666666665, 0.9022333333333332, 0.9027666666666667, 0.9022333333333332, 0.9015333333333333, 0.9018333333333333, 0.9006666666666667, 0.9014666666666666, 0.9002333333333332, 0.9011333333333333, 0.8991666666666667, 0.8924333333333335, 0.8863666666666667, 0.6758, 0.7396, 0.4129666666666666, 0.1665, 0.12183333333333332, 0.10170000000000001, 0.10143333333333333, 0.09946666666666668, 0.098, 0.09953333333333333, 0.09856666666666666, 0.09686666666666667, 0.09709999999999999, 0.09666666666666666, 0.09626666666666665, 0.09540000000000001, 0.095],
              3: [0.9046666666666667, 0.9046666666666667, 0.9045666666666665, 0.9046666666666667, 0.9044333333333332, 0.9044000000000001, 0.9041333333333335, 0.9044333333333334, 0.9041, 0.9037000000000001, 0.9039666666666667, 0.9038999999999999, 0.9035666666666667, 0.9038, 0.9034333333333334, 0.9031666666666667, 0.9040333333333332, 0.9028333333333334, 0.9031333333333335, 0.9029333333333334, 0.9031666666666667, 0.9026333333333334, 0.9027333333333333, 0.9024333333333334, 0.9023666666666668, 0.9015666666666666, 0.9012333333333332, 0.9011333333333335, 0.9009666666666666, 0.9001666666666669, 0.8989333333333335, 0.8994333333333333, 0.8979333333333333, 0.8685666666666668, 0.8395999999999999, 0.7285333333333333, 0.22929999999999998, 0.16246666666666668, 0.11846666666666665, 0.10213333333333334, 0.0994, 0.09866666666666667, 0.09866666666666667, 0.0983, 0.09843333333333334, 0.09770000000000001, 0.09643333333333333, 0.0968, 0.09643333333333334, 0.09593333333333334, 0.09533333333333335],
              4: [0.9046666666666667, 0.9046666666666667, 0.9046666666666667, 0.9046333333333335, 0.9046333333333335, 0.9048, 0.9045666666666667, 0.9046999999999998, 0.9044666666666666, 0.9047666666666666, 0.9047333333333334, 0.9044666666666666, 0.9044333333333332, 0.9044666666666666, 0.9036333333333333, 0.9041666666666668, 0.9037333333333333, 0.9036333333333333, 0.9039333333333331, 0.9033999999999999, 0.9035666666666666, 0.9031333333333332, 0.9021666666666667, 0.9028333333333334, 0.9025666666666666, 0.9022666666666666, 0.9019, 0.9026333333333334, 0.9019, 0.9006333333333334, 0.9001666666666667, 0.8946333333333332, 0.8933, 0.8428000000000001, 0.8833666666666667, 0.6870666666666667, 0.2853333333333333, 0.1815, 0.1187, 0.10596666666666665, 0.10003333333333334, 0.0989, 0.09863333333333332, 0.0986, 0.09759999999999999, 0.09763333333333334, 0.09659999999999999, 0.09636666666666667, 0.09623333333333332, 0.09553333333333335, 0.09533333333333335],
              5: [0.9036666666666665, 0.9036666666666665, 0.9036666666666665, 0.9036666666666665, 0.9034999999999999, 0.9036666666666665, 0.9040333333333332, 0.9039333333333334, 0.9041333333333332, 0.9040333333333332, 0.9038999999999998, 0.9036666666666665, 0.9034333333333334, 0.9032, 0.9037000000000001, 0.9029, 0.9037666666666665, 0.9037, 0.9032333333333332, 0.9031666666666667, 0.9023666666666665, 0.9024333333333333, 0.9024000000000001, 0.9008333333333333, 0.9016, 0.9017666666666668, 0.9024333333333334, 0.9014, 0.9011666666666667, 0.9004666666666667, 0.9004, 0.8997333333333334, 0.8956, 0.8813000000000001, 0.7992, 0.5805666666666667, 0.39816666666666667, 0.19356666666666666, 0.10836666666666668, 0.10293333333333332, 0.10206666666666667, 0.10076666666666667, 0.09913333333333332, 0.09766666666666665, 0.09723333333333334, 0.0981, 0.09753333333333333, 0.09723333333333335, 0.09613333333333335, 0.09593333333333334, 0.09633333333333335]}

    l1 = plt.plot(x, y_dict[1], 'm--', label='1')
    l2 = plt.plot(x, y_dict[2], 'r--', label='2')
    l3 = plt.plot(x, y_dict[3], 'g--', label='3')
    l4 = plt.plot(x, y_dict[4], 'b--', label='4')
    l5 = plt.plot(x, y_dict[5], 'c--', label='5')
    plt.plot(x, y_dict[1], 'mx-', x, y_dict[2], 'ro-', x, y_dict[3], 'g+-', x, y_dict[4], 'b^-', x, y_dict[5], 'c*-', )
    plt.title('Fig 2')
    plt.xlabel('Infection rate')
    plt.ylabel('accurate rate')
    plt.legend()
    plt.show()


def graph_3():
    x = np.linspace(0, 1, 51)
    y_1 = [0.8973333333333334, 0.8974, 0.8976000000000001, 0.8978333333333334, 0.8973666666666666, 0.8973000000000001,
     0.8972666666666667, 0.8977333333333334, 0.8972333333333333, 0.8970666666666668, 0.8969666666666667,
     0.8975333333333333, 0.8971000000000002, 0.8979666666666667, 0.8971333333333333, 0.8963666666666666, 0.8965,
     0.8963999999999999, 0.8974, 0.8967666666666668, 0.8950333333333333, 0.8919666666666668, 0.8939666666666668,
     0.8851666666666667, 0.8129, 0.47673333333333334, 0.3164666666666667, 0.11426666666666667, 0.10583333333333333,
     0.10576666666666665, 0.1045, 0.10436666666666668, 0.10300000000000001, 0.10346666666666667, 0.1024,
     0.10286666666666666, 0.10270000000000001, 0.10329999999999999, 0.1022, 0.10303333333333334, 0.10263333333333333,
     0.10303333333333334, 0.10200000000000001, 0.10246666666666666, 0.10236666666666668, 0.1024, 0.10246666666666666,
     0.1026, 0.10203333333333334, 0.10253333333333334, 0.10266666666666666]

    y_2 = [0.8973333333333334, 0.8973333333333334, 0.8973000000000001, 0.8973333333333334, 0.8973666666666666,
     0.8972000000000001, 0.8973000000000001, 0.8973000000000001, 0.8975, 0.8975, 0.8972333333333335, 0.8978000000000002,
     0.8974333333333334, 0.8977333333333333, 0.8975, 0.8978000000000002, 0.8974333333333334, 0.8974666666666667,
     0.8974666666666666, 0.8975666666666665, 0.8975666666666665, 0.8975666666666667, 0.8974333333333334,
     0.8973333333333334, 0.8979666666666667, 0.8968999999999999, 0.8970666666666668, 0.8975000000000002,
     0.8969333333333334, 0.8970333333333335, 0.8977666666666668, 0.8955, 0.8831666666666667, 0.8914666666666667, 0.7874,
     0.5094333333333333, 0.35073333333333334, 0.1986, 0.10666666666666666, 0.10400000000000001, 0.10356666666666667,
     0.10310000000000001, 0.10253333333333334, 0.10313333333333333, 0.1024, 0.10283333333333333, 0.10269999999999999,
     0.10233333333333335, 0.10196666666666668, 0.10256666666666667, 0.10266666666666666]

    l2 = plt.plot(x, y_1, 'g--', label='Distributed no backup')
    l3 = plt.plot(x, y_2, 'b--', label='Distributed backup')
    plt.plot(x, y_1, 'ro-', x, y_2, 'g+-')
    plt.title('Fig 3')
    plt.xlabel('Infection rate')
    plt.ylabel('accurate rate')
    plt.legend()
    plt.show()


# 返回污染数据集编号：
def check(a, worker_circle):
    s = set()
    for i in a:
        if ((i % worker_circle) + 1) in a:
            s.add((i % worker_circle) + 1)
        if ((i - 2 + worker_circle) % worker_circle + 1) in a:
            # print(i)
            s.add(i)
    # print('污染数据集编号： ', s)
    return s


def mr_check(a, worker_num, circle_no):
    mr_s = []
    workers_each_circle = splitInteger(worker_num, circle_no)
    offsets = []
    print('每个环的worker数目： ', workers_each_circle)
    # 偏移量->该环上的worker数目的dict
    offset_to_worker_num = {}
    offset = 0
    offsets.append(offset)
    for i in range(len(workers_each_circle)):
        offset_to_worker_num[offset] = workers_each_circle[i]
        offset += workers_each_circle[i]
        offsets.append(offset)
    # print(offset_to_worker_num)
    # print('offsets:', offsets)
    # a1是偏移量->数据编号的dict
    a1 = {}
    for ofs in offsets:
        a1[ofs] = []

    for aa in a:
        for i in range(1, len(offsets)):
            if aa <= offsets[i]:
                a1[offsets[i-1]].append(aa - offsets[i-1])
                break
    print(a1)
    for (key, value) in a1.items():
        if key in offset_to_worker_num:
            s1 = list(check(value, offset_to_worker_num[key]))
            mr_s.extend(s1 + key * np.ones(shape=np.shape(s1), dtype=int))
    print('污染数据集编号： ', mr_s)
    return mr_s


# 近似均分整数m为n份，每份相差不超过1
def splitInteger(m, n):
    assert n > 0
    quotient = m / n
    remainder = m % n
    ans = [quotient] * n
    for x in range(n - 1, -1, -1):
        if remainder < 0:
            ans[x] -= 1
            remainder += 1
        elif remainder > 0:
            ans[x] += 1
            remainder -= 1
        else:
            break
    for x in range(n):
        ans[x] = math.floor(ans[x])
    return ans


def count(l):
    no = 0
    for i in l:
        if i >= 1:
            no += 1
    return no


# 概率图
def graph_4():
    nodes = 30
    experiment_no = 1000
    indexList = range(1, nodes + 1)
    data = {1: [], 10: [], 15: []}
    circle_nos = [1, 10, 15]
    poisoning_no = []
    for circle_no in circle_nos:
        for contaminated_num in range(1, 16):
            ss = []
            for i in range(experiment_no):
                contaminated_node_index = random.sample(indexList, contaminated_num)
                s = mr_check(contaminated_node_index, nodes, circle_no)
                print(len(s))
                # retA = [index for index in contaminated_node_index if index in s]
                # print('retA:', retA)
                ss.append(len(s))
            print(ss)
            print(np.mean(ss))
            data[circle_no].append(1 - count(ss) / experiment_no)
            # poisoning_no.append(count(ss) / 1000)

            # poisoning_no = [0.0, 0.0, 0.022, 0.056, 0.12, 0.211, 0.273, 0.392, 0.454, 0.533, 0.631, 0.693, 0.771, 0.85, 0.88, 0.914, 0.947, 0.969, 0.974, 0.986, 0.993, 0.996, 0.999, 0.999, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
            # poisoning_no = 100 * np.ones(shape=np.shape(poisoning_no)) - poisoning_no
            print(poisoning_no)
            # x = np.linspace(0, 101)
        print('data:')
        print(data)
        x = np.arange(1 / 30, 16 / 30, 1 / 30)
        plt.plot(x, data[circle_no], label=str(circle_no))
        y_yijie = [
            [1., 0.931, 0.8, 0.629, 0.447, 0.283, 0.157, 0.0745, 0.0293, 0.00922, 0.00218, 0.000358, 0.0000351, 1.55e-6,
             1.29e-8],
            [1., 0.931, 0.801, 0.63, 0.448, 0.284, 0.158, 0.075, 0.0296, 0.00933, 0.00222, 0.000365, 0.0000359, 1.59e-6,
             1.34e-8],
            [1., 0.945, 0.84, 0.698, 0.54, 0.386, 0.254, 0.152, 0.0817, 0.0394, 0.0167, 0.00622, 0.00198, 0.000534,
             0.000119],
            [1., 0.95, 0.853, 0.723, 0.576, 0.429, 0.297, 0.191, 0.113, 0.0614, 0.0304, 0.0136, 0.00545, 0.00194,
             0.000608],
            [1., 0.95, 0.855, 0.726, 0.58, 0.433, 0.302, 0.195, 0.116, 0.0636, 0.0317, 0.0143, 0.00579, 0.00208,
             0.000658],
            [1., 0.951, 0.858, 0.731, 0.587, 0.443, 0.312, 0.205, 0.124, 0.0697, 0.0359, 0.0168, 0.00716, 0.00273,
             0.000927],
            [1., 0.952, 0.859, 0.733, 0.59, 0.446, 0.315, 0.208, 0.127, 0.0719, 0.0374, 0.0179, 0.00775, 0.00303,
             0.00106],
            [1., 0.951, 0.859, 0.733, 0.589, 0.445, 0.314, 0.207, 0.126, 0.0715, 0.0372, 0.0178, 0.00774, 0.00305,
             0.00108],
            [1., 0.951, 0.857, 0.73, 0.586, 0.441, 0.31, 0.203, 0.123, 0.0692, 0.0358, 0.0169, 0.00732, 0.00287,
             0.00101],
            [1., 0.95, 0.855, 0.726, 0.58, 0.434, 0.303, 0.196, 0.118, 0.065, 0.033, 0.0153, 0.00646, 0.00247,
             0.000846],
            [1., 0.949, 0.852, 0.72, 0.572, 0.424, 0.292, 0.186, 0.109, 0.0589, 0.029, 0.013, 0.00524, 0.0019,
             0.000615],
            [1., 0.948, 0.848, 0.712, 0.56, 0.41, 0.278, 0.173, 0.0989, 0.0513, 0.0241, 0.0101, 0.0038, 0.00126,
             0.000368],
            [1., 0.946, 0.842, 0.702, 0.546, 0.393, 0.26, 0.158, 0.0864, 0.0426, 0.0186, 0.00718, 0.00241, 0.000693,
             0.000169],
            [1., 0.943, 0.835, 0.69, 0.529, 0.374, 0.241, 0.14, 0.0731, 0.0336, 0.0134, 0.00456, 0.00129, 0.000297,
             0.0000538],
            [1., 0.942, 0.831, 0.682, 0.517, 0.36, 0.227, 0.128, 0.0642, 0.0278, 0.0101, 0.00303, 0.000702, 0.000117,
             0.0000124]]
        # plt.plot(x, y_yijie[circle_no - 1], label='model' + str(circle_no))
    plt.title('Fig 4- circles' + str(circle_nos[0]))
    plt.xlabel('ideal')
    plt.ylabel('reality')
    plt.legend()
        # plt.xticks(np.arange(0, 101, 5))
        # plt.yticks(np.arange(0, 101, 5))
    plt.show()


def graph_5():
    x = range(0, 21)
    y = [1 - comb(50, m) * np.power(2, m)/comb(100, m) for m in x]
    # y = [1/(1+np.exp(-i)) for i in x]
    plt.plot(x, y)
    plt.show()


def graph_6_sum(m, n, k):
    s = 0
    for i in range(1, math.floor(n/2)):
        s += pow(-1, i) * (k - i) * comb((m - n + k - 2 * i), (n - 2 * i))
    return s


def graph_6():
    m = 100
    k = 10
    x = range(1, 50)
    y = [((comb((m - n + k), n) - graph_6_sum(m, n, k))/comb(m, n)) for n in x]
    plt.plot(x, y)
    plt.show()


def graph_7_sum(m, n, k):
    s = 0
    for i in range(0, min(k, 2 * k, m - n - k, n) + 1):
        # s += comb(m - n - k - i, n - i)/comb(m - n - k, n - i) * (comb(k, i) * pow(2, i)/comb(2*k,i))
        s += comb(m - n - k - i, n - i) * (comb(k, i) * pow(2, i))
    return s


def graph_7():
    m = 100
    color = {1: 'b-', 25: 'r-', 50: 'g-'}
    for k in [1, 25, 50]:
        x = range(0, math.ceil((m - k) / 2))
        # y = [(graph_7_sum(m, n, k)/comb(m, n)) for n in x]
        y = [1 - (graph_7_sum(m, n, k) / (comb(m - n + k, n))) for n in x]
        plt.plot(x[:20], y[:20])
        plt.plot(x[:20], y[:20], color[k])
        plt.plot(x[:20], y[:20], color[k], label=str(k))
    # y1 = [1 - comb(50, m) * np.power(2, m) / comb(100, m) for m in x]
    y1 = [1 - ((comb(100 - m, m) + comb(100 - m - 1, m - 1)) / comb(100, m)) for m in x]
    plt.plot(x[:20], y1[:20], 'r-')
    plt.plot(x[:20], y1[:20], 'r-', label='model')
    plt.legend()
    plt.show()


def graph_8():
    n = 100
    k = 1
    x = range(0, math.floor(n/2))
    y = [1 - ((comb(n - m, m) + comb(n-m - 1, m - 1))/comb(n, m)) for m in x]
    plt.plot(x, y)
    plt.show()


def graph_8_sum(m, n, k):
    s = 0
    for i in range(0, k):
        # s += comb(m - n - k - i, n - i)/comb(m - n - k, n - i) * (comb(k, i) * pow(2, i)/comb(2*k,i))
        s += comb(m - n + i, n - 3 * i) * comb(k, i)
    return s/comb(m, n)


# 最新递推公式：
def graph_9():
    y = [
        [1., 0.931, 0.8, 0.629, 0.447, 0.283, 0.157, 0.0745, 0.0293, 0.00922, 0.00218, 0.000358, 0.0000351, 1.55e-6,
         1.29e-8],
        [1., 0.931, 0.801, 0.63, 0.448, 0.284, 0.158, 0.075, 0.0296, 0.00933, 0.00222, 0.000365, 0.0000359, 1.59e-6,
         1.34e-8],
        [1., 0.945, 0.84, 0.698, 0.54, 0.386, 0.254, 0.152, 0.0817, 0.0394, 0.0167, 0.00622, 0.00198, 0.000534,
         0.000119],
        [1., 0.95, 0.853, 0.723, 0.576, 0.429, 0.297, 0.191, 0.113, 0.0614, 0.0304, 0.0136, 0.00545, 0.00194, 0.000608],
        [1., 0.95, 0.855, 0.726, 0.58, 0.433, 0.302, 0.195, 0.116, 0.0636, 0.0317, 0.0143, 0.00579, 0.00208, 0.000658],
        [1., 0.951, 0.858, 0.731, 0.587, 0.443, 0.312, 0.205, 0.124, 0.0697, 0.0359, 0.0168, 0.00716, 0.00273,
         0.000927],
        [1., 0.952, 0.859, 0.733, 0.59, 0.446, 0.315, 0.208, 0.127, 0.0719, 0.0374, 0.0179, 0.00775, 0.00303, 0.00106],
        [1., 0.951, 0.859, 0.733, 0.589, 0.445, 0.314, 0.207, 0.126, 0.0715, 0.0372, 0.0178, 0.00774, 0.00305, 0.00108],
        [1., 0.951, 0.857, 0.73, 0.586, 0.441, 0.31, 0.203, 0.123, 0.0692, 0.0358, 0.0169, 0.00732, 0.00287, 0.00101],
        [1., 0.95, 0.855, 0.726, 0.58, 0.434, 0.303, 0.196, 0.118, 0.065, 0.033, 0.0153, 0.00646, 0.00247, 0.000846],
        [1., 0.949, 0.852, 0.72, 0.572, 0.424, 0.292, 0.186, 0.109, 0.0589, 0.029, 0.013, 0.00524, 0.0019, 0.000615],
        [1., 0.948, 0.848, 0.712, 0.56, 0.41, 0.278, 0.173, 0.0989, 0.0513, 0.0241, 0.0101, 0.0038, 0.00126, 0.000368],
        [1., 0.946, 0.842, 0.702, 0.546, 0.393, 0.26, 0.158, 0.0864, 0.0426, 0.0186, 0.00718, 0.00241, 0.000693,
         0.000169],
        [1., 0.943, 0.835, 0.69, 0.529, 0.374, 0.241, 0.14, 0.0731, 0.0336, 0.0134, 0.00456, 0.00129, 0.000297,
         0.0000538],
        [1., 0.942, 0.831, 0.682, 0.517, 0.36, 0.227, 0.128, 0.0642, 0.0278, 0.0101, 0.00303, 0.000702, 0.000117,
         0.0000124]]
    x = np.arange(1/30, 16/30, 1/30)
    print(x)
    print(y[1])
    for i in [0, 9, 14]:
        # print(i, np.shape(y[i]))
        plt.plot(x, y[i], label=i+1)
        plt.legend()
    plt.show()

def graph_minist():
    x = np.linspace(0, 1, 21)
    y_dict = {
        1: [0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309, 0.908802308802309],
        2: [0.908802308802309, 0.9078643578643579, 0.9067460317460319, 0.9042784992784993, 0.900808080808081, 0.8949494949494949, 0.8855339105339105, 0.8720418470418471, 0.8524747474747475, 0.8236219336219335, 0.7800360750360751, 0.7233044733044733, 0.6111688311688311, 0.32844877344877343, 0.17450937950937948, 0.1405266955266955, 0.10956709956709956, 0.08615440115440115, 0.06516594516594516, 0.05381673881673882, 0.04509379509379509],
        3: [0.9076479076479076, 0.9076118326118324, 0.9072799422799424, 0.9072366522366524, 0.9064213564213564, 0.9068614718614718, 0.9056277056277056, 0.9050360750360751, 0.9043939393939395, 0.8953751803751804, 0.8924603174603174, 0.8903607503607505, 0.8782683982683983, 0.824862914862915, 0.7885137085137085, 0.6511976911976912, 0.346002886002886, 0.16693362193362193, 0.11251082251082249, 0.07143578643578644, 0.048629148629148626]
    }
    l1 = plt.plot(x, y_dict[1], 'm--', label='1')
    l2 = plt.plot(x, y_dict[2], 'r--', label='2')
    l3 = plt.plot(x, y_dict[3], 'g--', label='3')

    plt.plot(x, y_dict[1], 'mx-', x, y_dict[2], 'ro-', x, y_dict[3],  )
    plt.title('Fig 2')
    plt.xlabel('Infection rate')
    plt.ylabel('accurate rate')
    plt.legend()
    plt.show()




if __name__ == '__main__':
    graph_minist()
    # graph_9()